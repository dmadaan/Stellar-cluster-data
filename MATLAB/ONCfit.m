%----------51 million MLR --------%


Mass1 = load('MONC.mat');
Mass1 = Mass1.Mass;
lm1 = log(Mass1); 
%------------------mass spectrum------------------%
[n,m] = size(Mass1);% n is the number of data points 
%nbins = 2*(n)^(2/5);
nbins = 50;
nbins = ceil(nbins);

hist(log(Mass1),nbins)%%%% this is plotting in logspace with fixed distances.
[counts,centers] = hist(log(Mass1),nbins);


figure
plot(centers,counts,'^')


w = centers(1,2) - centers(1,1) 

fm = counts./(w.*n);%this is mfm

figure
plot (centers,log10(fm),'^')


lx1 = centers;%note this is ln and not log10
x1 = exp(lx1);
y1 = fm;%this is mfm
mly1 = log10(fm);

[m1,n1] = size(centers)
for i = 1:n1
    if mly1(1,i) == -Inf
        mly1(1,i) = NaN;
        y1(1,i) = NaN;
        x1(1,i) = NaN;
        lx1(1,i) = NaN;
    end
end
mly1(isnan(mly1)) = [];
x1(isnan(x1)) = [];
lx1(isnan(lx1)) = [];
y1(isnan(y1)) = [];
logx1 = log10(x1); 



figure 
plot(log10(x1), y1,'^')
xlabel logm
ylabel mfm
hold on 
a = 1.421;
b = -2.071;
c = 0.351;
x0 = logspace(-1.5,1.5,100); % these are linear values but logarithmically distirbuted.
y0 = (a.*0.5).*exp((a.*b)+((a.*c).^2.*0.5)).*x0.^(-a).*erfc(((a.*c)-((log(x0)-b)./c))./sqrt(2));
plot(log10(x0),y0,'g')

figure
plot(x1, mly1,'^')
xlabel m
ylabel logmfm
hold on 
[k,l] = size(x1)


%------------plotting LOG M vs. LOG (MFM) MLP for the paramters---------%
figure
plot(log10(x1), mly1,'^')
xlabel logm
ylabel logmf(m)
hold on 

%these numbers are for ignoring only the first data point to reach
%convergence
a = 1.421;
b = -2.071;
c = 0.351;
x0 = logspace(-1.5,1.5,100); % these are linear values but logarithmically distirbuted.
y0 = log10((a.*0.5).*exp((a.*b)+((a.*c).^2.*0.5)).*x0.^(-a).*erfc(((a.*c)-((log(x0)-b)./c))./sqrt(2)));
plot(log10(x0),y0,'g')
hold on 
%----------------plotting the pareto fit----------%
%we will have to do non-linear levenberg for this one too. 
a = 1.714;
b = 0.9301;
yp = (a.*b.^a)./(x0.^(a+1));
lyp = log10(x0.*yp);
plot(log10(x0),lyp,'.','MarkerSize',10)
xlabel 'log(m)'
ylabel 'log(mf(m))'

%QQ plot: residual normality
a1 = 1.714;
b1 = -0.0724;
c1 = 0.01692;

fy1 = log10((a1.*0.5).*exp((a1.*b1)+((a1.*c1).^2.*0.5)).*x1.^(-a1).*erfc(((a1.*c1)-((log(x1)-b1)./c1))./sqrt(2)));
figure
residual = fy1 - mly1;
residual = residual(1,5:50);
qqplot(residual);

h = kstest(residual)
%------------------------MLP fit-----------------%


%CREATEFIT(X1,MLY1)
%  Create a fit.
%
%  Data for 'untitled fit 1' fit:
%      X Input : x1
%      Y Output: mly1
%  Output:
%      fitresult : a fit object representing the fit.
%      gof : structure with goodness-of fit info.
%
%  See also FIT, CFIT, SFIT.

%  Auto-generated by MATLAB on 11-May-2016 13:41:32


% Fit: 'untitled fit 1'.
[xData, yData] = prepareCurveData( x1, mly1 );

% Set up fittype and options.
ft = fittype( 'log10((a*0.5)*exp((a*b)+((a*c)^2*0.5))*x^(-a)*erfc(((a*c)-((log(x)-b)/c))/sqrt(2)))', 'independent', 'x', 'dependent', 'y' );
opts = fitoptions( 'Method', 'NonlinearLeastSquares' );
opts.Algorithm = 'Levenberg-Marquardt';
opts.Display = 'Off';
opts.StartPoint = [1.35 0.369239004801931 0.609215679637835];

% Fit model to data.
[fitresult, gof] = fit( xData, yData, ft, opts );

% Create a figure for the plots.
figure( 'Name', 'untitled fit 1' );

% Plot fit with data.
subplot( 2, 1, 1 );
h = plot( fitresult, xData, yData );
legend( h, 'mly1 vs. x1', 'untitled fit 1', 'Location', 'NorthEast' );
% Label axes
xlabel x1
ylabel mly1
grid on

% Plot residuals.

h = plot( fitresult, xData, yData, '^','residuals' );
legend( h, 'residuals', 'Zero Line', 'Location', 'NorthEast' );
% Label axes
xlabel m
ylabel residuals
grid on






